// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: handshake.proto
// Protobuf C++ Version: 5.29.3

#ifndef handshake_2eproto_2epb_2eh
#define handshake_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_handshake_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_handshake_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_handshake_2eproto;
class HandshakeHello;
struct HandshakeHelloDefaultTypeInternal;
extern HandshakeHelloDefaultTypeInternal _HandshakeHello_default_instance_;
class HandshakeResponse;
struct HandshakeResponseDefaultTypeInternal;
extern HandshakeResponseDefaultTypeInternal _HandshakeResponse_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class HandshakeResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:HandshakeResponse) */ {
 public:
  inline HandshakeResponse() : HandshakeResponse(nullptr) {}
  ~HandshakeResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HandshakeResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HandshakeResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HandshakeResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline HandshakeResponse(const HandshakeResponse& from) : HandshakeResponse(nullptr, from) {}
  inline HandshakeResponse(HandshakeResponse&& from) noexcept
      : HandshakeResponse(nullptr, std::move(from)) {}
  inline HandshakeResponse& operator=(const HandshakeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandshakeResponse& operator=(HandshakeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HandshakeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandshakeResponse* internal_default_instance() {
    return reinterpret_cast<const HandshakeResponse*>(
        &_HandshakeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(HandshakeResponse& a, HandshakeResponse& b) { a.Swap(&b); }
  inline void Swap(HandshakeResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandshakeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HandshakeResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HandshakeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HandshakeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HandshakeResponse& from) { HandshakeResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HandshakeResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "HandshakeResponse"; }

 protected:
  explicit HandshakeResponse(::google::protobuf::Arena* arena);
  HandshakeResponse(::google::protobuf::Arena* arena, const HandshakeResponse& from);
  HandshakeResponse(::google::protobuf::Arena* arena, HandshakeResponse&& from) noexcept
      : HandshakeResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKemCiphertextFieldNumber = 1,
    kIdentityPubFieldNumber = 3,
    kIdentitySigFieldNumber = 4,
    kVersionFieldNumber = 2,
  };
  // bytes kem_ciphertext = 1;
  void clear_kem_ciphertext() ;
  const std::string& kem_ciphertext() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_kem_ciphertext(Arg_&& arg, Args_... args);
  std::string* mutable_kem_ciphertext();
  PROTOBUF_NODISCARD std::string* release_kem_ciphertext();
  void set_allocated_kem_ciphertext(std::string* value);

  private:
  const std::string& _internal_kem_ciphertext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kem_ciphertext(
      const std::string& value);
  std::string* _internal_mutable_kem_ciphertext();

  public:
  // bytes identity_pub = 3;
  void clear_identity_pub() ;
  const std::string& identity_pub() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identity_pub(Arg_&& arg, Args_... args);
  std::string* mutable_identity_pub();
  PROTOBUF_NODISCARD std::string* release_identity_pub();
  void set_allocated_identity_pub(std::string* value);

  private:
  const std::string& _internal_identity_pub() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identity_pub(
      const std::string& value);
  std::string* _internal_mutable_identity_pub();

  public:
  // bytes identity_sig = 4;
  void clear_identity_sig() ;
  const std::string& identity_sig() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identity_sig(Arg_&& arg, Args_... args);
  std::string* mutable_identity_sig();
  PROTOBUF_NODISCARD std::string* release_identity_sig();
  void set_allocated_identity_sig(std::string* value);

  private:
  const std::string& _internal_identity_sig() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identity_sig(
      const std::string& value);
  std::string* _internal_mutable_identity_sig();

  public:
  // uint32 version = 2;
  void clear_version() ;
  ::uint32_t version() const;
  void set_version(::uint32_t value);

  private:
  ::uint32_t _internal_version() const;
  void _internal_set_version(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:HandshakeResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HandshakeResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr kem_ciphertext_;
    ::google::protobuf::internal::ArenaStringPtr identity_pub_;
    ::google::protobuf::internal::ArenaStringPtr identity_sig_;
    ::uint32_t version_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_handshake_2eproto;
};
// -------------------------------------------------------------------

class HandshakeHello final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:HandshakeHello) */ {
 public:
  inline HandshakeHello() : HandshakeHello(nullptr) {}
  ~HandshakeHello() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HandshakeHello* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HandshakeHello));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HandshakeHello(
      ::google::protobuf::internal::ConstantInitialized);

  inline HandshakeHello(const HandshakeHello& from) : HandshakeHello(nullptr, from) {}
  inline HandshakeHello(HandshakeHello&& from) noexcept
      : HandshakeHello(nullptr, std::move(from)) {}
  inline HandshakeHello& operator=(const HandshakeHello& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandshakeHello& operator=(HandshakeHello&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HandshakeHello& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandshakeHello* internal_default_instance() {
    return reinterpret_cast<const HandshakeHello*>(
        &_HandshakeHello_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(HandshakeHello& a, HandshakeHello& b) { a.Swap(&b); }
  inline void Swap(HandshakeHello* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandshakeHello* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HandshakeHello* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HandshakeHello>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HandshakeHello& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HandshakeHello& from) { HandshakeHello::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HandshakeHello* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "HandshakeHello"; }

 protected:
  explicit HandshakeHello(::google::protobuf::Arena* arena);
  HandshakeHello(::google::protobuf::Arena* arena, const HandshakeHello& from);
  HandshakeHello(::google::protobuf::Arena* arena, HandshakeHello&& from) noexcept
      : HandshakeHello(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKemPublicKeyFieldNumber = 1,
    kIdentityPubFieldNumber = 3,
    kIdentitySigFieldNumber = 4,
    kVersionFieldNumber = 2,
  };
  // bytes kem_public_key = 1;
  void clear_kem_public_key() ;
  const std::string& kem_public_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_kem_public_key(Arg_&& arg, Args_... args);
  std::string* mutable_kem_public_key();
  PROTOBUF_NODISCARD std::string* release_kem_public_key();
  void set_allocated_kem_public_key(std::string* value);

  private:
  const std::string& _internal_kem_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kem_public_key(
      const std::string& value);
  std::string* _internal_mutable_kem_public_key();

  public:
  // bytes identity_pub = 3;
  void clear_identity_pub() ;
  const std::string& identity_pub() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identity_pub(Arg_&& arg, Args_... args);
  std::string* mutable_identity_pub();
  PROTOBUF_NODISCARD std::string* release_identity_pub();
  void set_allocated_identity_pub(std::string* value);

  private:
  const std::string& _internal_identity_pub() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identity_pub(
      const std::string& value);
  std::string* _internal_mutable_identity_pub();

  public:
  // bytes identity_sig = 4;
  void clear_identity_sig() ;
  const std::string& identity_sig() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identity_sig(Arg_&& arg, Args_... args);
  std::string* mutable_identity_sig();
  PROTOBUF_NODISCARD std::string* release_identity_sig();
  void set_allocated_identity_sig(std::string* value);

  private:
  const std::string& _internal_identity_sig() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identity_sig(
      const std::string& value);
  std::string* _internal_mutable_identity_sig();

  public:
  // uint32 version = 2;
  void clear_version() ;
  ::uint32_t version() const;
  void set_version(::uint32_t value);

  private:
  ::uint32_t _internal_version() const;
  void _internal_set_version(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:HandshakeHello)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HandshakeHello& from_msg);
    ::google::protobuf::internal::ArenaStringPtr kem_public_key_;
    ::google::protobuf::internal::ArenaStringPtr identity_pub_;
    ::google::protobuf::internal::ArenaStringPtr identity_sig_;
    ::uint32_t version_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_handshake_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// HandshakeHello

// bytes kem_public_key = 1;
inline void HandshakeHello::clear_kem_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kem_public_key_.ClearToEmpty();
}
inline const std::string& HandshakeHello::kem_public_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:HandshakeHello.kem_public_key)
  return _internal_kem_public_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HandshakeHello::set_kem_public_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kem_public_key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:HandshakeHello.kem_public_key)
}
inline std::string* HandshakeHello::mutable_kem_public_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_kem_public_key();
  // @@protoc_insertion_point(field_mutable:HandshakeHello.kem_public_key)
  return _s;
}
inline const std::string& HandshakeHello::_internal_kem_public_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.kem_public_key_.Get();
}
inline void HandshakeHello::_internal_set_kem_public_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kem_public_key_.Set(value, GetArena());
}
inline std::string* HandshakeHello::_internal_mutable_kem_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.kem_public_key_.Mutable( GetArena());
}
inline std::string* HandshakeHello::release_kem_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:HandshakeHello.kem_public_key)
  return _impl_.kem_public_key_.Release();
}
inline void HandshakeHello::set_allocated_kem_public_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kem_public_key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.kem_public_key_.IsDefault()) {
    _impl_.kem_public_key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:HandshakeHello.kem_public_key)
}

// uint32 version = 2;
inline void HandshakeHello::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = 0u;
}
inline ::uint32_t HandshakeHello::version() const {
  // @@protoc_insertion_point(field_get:HandshakeHello.version)
  return _internal_version();
}
inline void HandshakeHello::set_version(::uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:HandshakeHello.version)
}
inline ::uint32_t HandshakeHello::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_;
}
inline void HandshakeHello::_internal_set_version(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = value;
}

// bytes identity_pub = 3;
inline void HandshakeHello::clear_identity_pub() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identity_pub_.ClearToEmpty();
}
inline const std::string& HandshakeHello::identity_pub() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:HandshakeHello.identity_pub)
  return _internal_identity_pub();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HandshakeHello::set_identity_pub(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identity_pub_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:HandshakeHello.identity_pub)
}
inline std::string* HandshakeHello::mutable_identity_pub() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_identity_pub();
  // @@protoc_insertion_point(field_mutable:HandshakeHello.identity_pub)
  return _s;
}
inline const std::string& HandshakeHello::_internal_identity_pub() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.identity_pub_.Get();
}
inline void HandshakeHello::_internal_set_identity_pub(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identity_pub_.Set(value, GetArena());
}
inline std::string* HandshakeHello::_internal_mutable_identity_pub() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.identity_pub_.Mutable( GetArena());
}
inline std::string* HandshakeHello::release_identity_pub() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:HandshakeHello.identity_pub)
  return _impl_.identity_pub_.Release();
}
inline void HandshakeHello::set_allocated_identity_pub(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identity_pub_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.identity_pub_.IsDefault()) {
    _impl_.identity_pub_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:HandshakeHello.identity_pub)
}

// bytes identity_sig = 4;
inline void HandshakeHello::clear_identity_sig() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identity_sig_.ClearToEmpty();
}
inline const std::string& HandshakeHello::identity_sig() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:HandshakeHello.identity_sig)
  return _internal_identity_sig();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HandshakeHello::set_identity_sig(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identity_sig_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:HandshakeHello.identity_sig)
}
inline std::string* HandshakeHello::mutable_identity_sig() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_identity_sig();
  // @@protoc_insertion_point(field_mutable:HandshakeHello.identity_sig)
  return _s;
}
inline const std::string& HandshakeHello::_internal_identity_sig() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.identity_sig_.Get();
}
inline void HandshakeHello::_internal_set_identity_sig(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identity_sig_.Set(value, GetArena());
}
inline std::string* HandshakeHello::_internal_mutable_identity_sig() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.identity_sig_.Mutable( GetArena());
}
inline std::string* HandshakeHello::release_identity_sig() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:HandshakeHello.identity_sig)
  return _impl_.identity_sig_.Release();
}
inline void HandshakeHello::set_allocated_identity_sig(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identity_sig_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.identity_sig_.IsDefault()) {
    _impl_.identity_sig_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:HandshakeHello.identity_sig)
}

// -------------------------------------------------------------------

// HandshakeResponse

// bytes kem_ciphertext = 1;
inline void HandshakeResponse::clear_kem_ciphertext() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kem_ciphertext_.ClearToEmpty();
}
inline const std::string& HandshakeResponse::kem_ciphertext() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:HandshakeResponse.kem_ciphertext)
  return _internal_kem_ciphertext();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HandshakeResponse::set_kem_ciphertext(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kem_ciphertext_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:HandshakeResponse.kem_ciphertext)
}
inline std::string* HandshakeResponse::mutable_kem_ciphertext() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_kem_ciphertext();
  // @@protoc_insertion_point(field_mutable:HandshakeResponse.kem_ciphertext)
  return _s;
}
inline const std::string& HandshakeResponse::_internal_kem_ciphertext() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.kem_ciphertext_.Get();
}
inline void HandshakeResponse::_internal_set_kem_ciphertext(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kem_ciphertext_.Set(value, GetArena());
}
inline std::string* HandshakeResponse::_internal_mutable_kem_ciphertext() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.kem_ciphertext_.Mutable( GetArena());
}
inline std::string* HandshakeResponse::release_kem_ciphertext() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:HandshakeResponse.kem_ciphertext)
  return _impl_.kem_ciphertext_.Release();
}
inline void HandshakeResponse::set_allocated_kem_ciphertext(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kem_ciphertext_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.kem_ciphertext_.IsDefault()) {
    _impl_.kem_ciphertext_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:HandshakeResponse.kem_ciphertext)
}

// uint32 version = 2;
inline void HandshakeResponse::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = 0u;
}
inline ::uint32_t HandshakeResponse::version() const {
  // @@protoc_insertion_point(field_get:HandshakeResponse.version)
  return _internal_version();
}
inline void HandshakeResponse::set_version(::uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:HandshakeResponse.version)
}
inline ::uint32_t HandshakeResponse::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_;
}
inline void HandshakeResponse::_internal_set_version(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = value;
}

// bytes identity_pub = 3;
inline void HandshakeResponse::clear_identity_pub() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identity_pub_.ClearToEmpty();
}
inline const std::string& HandshakeResponse::identity_pub() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:HandshakeResponse.identity_pub)
  return _internal_identity_pub();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HandshakeResponse::set_identity_pub(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identity_pub_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:HandshakeResponse.identity_pub)
}
inline std::string* HandshakeResponse::mutable_identity_pub() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_identity_pub();
  // @@protoc_insertion_point(field_mutable:HandshakeResponse.identity_pub)
  return _s;
}
inline const std::string& HandshakeResponse::_internal_identity_pub() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.identity_pub_.Get();
}
inline void HandshakeResponse::_internal_set_identity_pub(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identity_pub_.Set(value, GetArena());
}
inline std::string* HandshakeResponse::_internal_mutable_identity_pub() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.identity_pub_.Mutable( GetArena());
}
inline std::string* HandshakeResponse::release_identity_pub() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:HandshakeResponse.identity_pub)
  return _impl_.identity_pub_.Release();
}
inline void HandshakeResponse::set_allocated_identity_pub(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identity_pub_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.identity_pub_.IsDefault()) {
    _impl_.identity_pub_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:HandshakeResponse.identity_pub)
}

// bytes identity_sig = 4;
inline void HandshakeResponse::clear_identity_sig() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identity_sig_.ClearToEmpty();
}
inline const std::string& HandshakeResponse::identity_sig() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:HandshakeResponse.identity_sig)
  return _internal_identity_sig();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HandshakeResponse::set_identity_sig(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identity_sig_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:HandshakeResponse.identity_sig)
}
inline std::string* HandshakeResponse::mutable_identity_sig() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_identity_sig();
  // @@protoc_insertion_point(field_mutable:HandshakeResponse.identity_sig)
  return _s;
}
inline const std::string& HandshakeResponse::_internal_identity_sig() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.identity_sig_.Get();
}
inline void HandshakeResponse::_internal_set_identity_sig(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identity_sig_.Set(value, GetArena());
}
inline std::string* HandshakeResponse::_internal_mutable_identity_sig() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.identity_sig_.Mutable( GetArena());
}
inline std::string* HandshakeResponse::release_identity_sig() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:HandshakeResponse.identity_sig)
  return _impl_.identity_sig_.Release();
}
inline void HandshakeResponse::set_allocated_identity_sig(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identity_sig_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.identity_sig_.IsDefault()) {
    _impl_.identity_sig_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:HandshakeResponse.identity_sig)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // handshake_2eproto_2epb_2eh
